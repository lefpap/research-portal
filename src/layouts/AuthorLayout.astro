---
import type { ComponentProps } from "astro/types";
import BaseLayout from "./BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { ChevronLeftIcon } from "lucide-react";
import AuthorPostsDisplay from "@/components/blocks/Author/AuthorPostsDisplay";
import AuthorWorkExperienceDisplay from "@/components/blocks/Author/AuthorWorkExperienceDisplay.astro";
import AuthorEducationDisplay from "@/components/blocks/Author/AuthorEducationDisplay.astro";
import GoBackButton from "@/components/utility/GoBackButton";
import { Image } from "astro:assets";
import AuthorPlaceholderImage from "@/content/authors/_images/_placeholder.png";
import {
  fetchEducationByAuthor,
  fetchProjectsByAuthor,
  fetchPublicationsByAuthor,
  fetchWorkExperienceByAuthor,
} from "@/lib/collection.utils";
import { extractLangFromUri, useTranslations } from "@/lib/i18n.utils";

interface Props extends ComponentProps<typeof BaseLayout> {
  // Add props here
  author: CollectionEntry<"authors">;
}

const { author, ...rest } = Astro.props;

const eductaion = await fetchEducationByAuthor({ author });
const workExperience = await fetchWorkExperienceByAuthor({ author });

const projectItems = await fetchProjectsByAuthor({
  author,
  filters: [({ data }) => data.status === "published"],
});

const publicationItems = await fetchPublicationsByAuthor({
  author,
  filters: [({ data }) => data.status === "published"],
});

const [lang] = extractLangFromUri(Astro.url);
const t = useTranslations(lang);
---

<BaseLayout {...rest}>
  <div class="container grid items-stretch gap-10">
    <GoBackButton
      variant={"outline"}
      size={"sm"}
      className="flex items-center justify-center gap-2 place-self-start"
      client:visible
    >
      <ChevronLeftIcon className="size-4" />
      {t("page.author.button.go-back")}
    </GoBackButton>
    <article>
      <header class="flex items-center justify-start gap-5">
        <Image
          src={author.data?.avatar ?? AuthorPlaceholderImage}
          alt="Author Avatar"
          width={author.data?.avatar?.width}
          height={author.data?.avatar?.height}
          class="size-28 rounded-full"
        />
        <div class="flex flex-col">
          <h1 class="mb text-5xl font-black">
            {`${author.data.firstname} ${author.data.lastname}`}
          </h1>
          <p class="text-muted-foreground">{author.data.email}</p>
        </div>
      </header>

      <main>
        <!-- Bio -->
        <div
          class="prose prose-stone mt-11 max-w-none dark:prose-invert md:prose-lg lg:prose-xl"
        >
          <slot />
        </div>

        <!-- Education -->
        {
          eductaion.length > 0 && (
            <div class="mt-11">
              <h2 class="text-3xl font-black">
                {t("page.author.heading.education")}
              </h2>
              <AuthorEducationDisplay education={eductaion} className="mt-11" />
            </div>
          )
        }

        <!-- Work Experience -->
        {
          workExperience.length > 0 && (
            <div class="mt-11">
              <h2 class="text-3xl font-black">
                {t("page.author.heading.work-experience")}
              </h2>
              <AuthorWorkExperienceDisplay
                workExperience={workExperience}
                className="mt-11"
              />
            </div>
          )
        }

        <!-- Author Posts -->
        {
          (projectItems.length > 0 || publicationItems.length > 0) && (
            <div class="mt-11">
              <h2 class="text-3xl font-black">
                {t("page.author.heading.posts")}
              </h2>
              <AuthorPostsDisplay
                className="mt-11"
                projectItems={projectItems}
                publicationItems={publicationItems}
                client:visible
              />
            </div>
          )
        }
      </main>
    </article>
  </div>
</BaseLayout>
